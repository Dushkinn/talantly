// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using talanty.Data;

namespace talantly.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("talantly.Models.Publications.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("attachmentFile")
                        .HasColumnType("longblob");

                    b.Property<Guid?>("attachmentTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("attachmentTypeId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("talantly.Models.Publications.AttachmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentTypes");
                });

            modelBuilder.Entity("talantly.Models.Publications.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("talantly.Models.Publications.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("talantly.Models.SubCategory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("categoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.ToTable("SubCategorys");
                });

            modelBuilder.Entity("talantly.Models.User.Account", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Img")
                        .HasColumnType("longblob");

                    b.Property<Guid?>("accountRoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("login")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("accountRoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("talantly.Models.User.AccountRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("talantly.Models.User.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SubCategoryid")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("accountid")
                        .HasColumnType("char(36)");

                    b.Property<string>("description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryid");

                    b.HasIndex("accountid");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("talantly.Models.User.ProfilePriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("profileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("profileId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("talantly.Models.Publications.Attachment", b =>
                {
                    b.HasOne("talantly.Models.User.Profile", null)
                        .WithMany("attachmentsList")
                        .HasForeignKey("ProfileId");

                    b.HasOne("talantly.Models.Publications.Publication", null)
                        .WithMany("attachmentList")
                        .HasForeignKey("PublicationId");

                    b.HasOne("talantly.Models.Publications.AttachmentType", "attachmentType")
                        .WithMany()
                        .HasForeignKey("attachmentTypeId");
                });

            modelBuilder.Entity("talantly.Models.Publications.Publication", b =>
                {
                    b.HasOne("talantly.Models.User.Profile", null)
                        .WithMany("PublicationList")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("talantly.Models.SubCategory", b =>
                {
                    b.HasOne("talantly.Models.Publications.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId");
                });

            modelBuilder.Entity("talantly.Models.User.Account", b =>
                {
                    b.HasOne("talantly.Models.User.AccountRole", "accountRole")
                        .WithMany()
                        .HasForeignKey("accountRoleId");
                });

            modelBuilder.Entity("talantly.Models.User.Profile", b =>
                {
                    b.HasOne("talantly.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryid");

                    b.HasOne("talantly.Models.User.Account", "account")
                        .WithMany("ProfileList")
                        .HasForeignKey("accountid");
                });

            modelBuilder.Entity("talantly.Models.User.ProfilePriority", b =>
                {
                    b.HasOne("talantly.Models.User.Profile", "profile")
                        .WithMany()
                        .HasForeignKey("profileId");
                });
#pragma warning restore 612, 618
        }
    }
}
